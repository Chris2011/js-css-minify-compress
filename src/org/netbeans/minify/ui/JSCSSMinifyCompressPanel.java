/**
 * Copyright [2013] Gaurav Gupta
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.netbeans.minify.ui;

class JSCSSMinifyCompressPanel extends javax.swing.JPanel {

    public final JSCSSMinifyCompressOptionsPanelController controller;

    public JSCSSMinifyCompressPanel(JSCSSMinifyCompressOptionsPanelController controller) {
        this.controller = controller;
        initComponents();

        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        javascriptMinifyTab = new javax.swing.JTabbedPane();
        jLayeredPaneJS = new javax.swing.JLayeredPane();
        jLayeredPaneJSInner = new javax.swing.JLayeredPane();
        headerJS = new javax.swing.JLabel();
        newJSFile = new javax.swing.JCheckBox();
        jsObfuscate = new javax.swing.JCheckBox();
        preExtensionJS_Label = new javax.swing.JLabel();
        separatorJS_Label = new javax.swing.JLabel();
        preExtensionJS = new javax.swing.JTextField();
        separatorJS = new javax.swing.JTextField();
        autoMinifyJS = new javax.swing.JCheckBox();
        headerPaneJS = new javax.swing.JLayeredPane();
        headerLabelJS = new javax.swing.JLabel();
        headerScrollPaneJS = new javax.swing.JScrollPane();
        headerEditorPaneJS = new javax.swing.JEditorPane();
        jLayeredPaneCSS = new javax.swing.JLayeredPane();
        jLayeredPaneCSSInner = new javax.swing.JLayeredPane();
        headerCSS = new javax.swing.JLabel();
        newCSSFile = new javax.swing.JCheckBox();
        preExtensionCSS_Label = new javax.swing.JLabel();
        separatorCSS_Label = new javax.swing.JLabel();
        preExtensionCSS = new javax.swing.JTextField();
        separatorCSS = new javax.swing.JTextField();
        autoMinifyCSS = new javax.swing.JCheckBox();
        headerPaneCSS = new javax.swing.JLayeredPane();
        headerLabelCSS = new javax.swing.JLabel();
        headerScrollPaneCSS = new javax.swing.JScrollPane();
        headerEditorPaneCSS = new javax.swing.JEditorPane();
        jLayeredPaneHTML = new javax.swing.JLayeredPane();
        jLayeredPaneHTMLInner = new javax.swing.JLayeredPane();
        headerHTML = new javax.swing.JLabel();
        newHTMLFile = new javax.swing.JCheckBox();
        preExtensionHTML_Label = new javax.swing.JLabel();
        separatorHTML_Label = new javax.swing.JLabel();
        preExtensionHTML = new javax.swing.JTextField();
        separatorHTML = new javax.swing.JTextField();
        buildInternalJSMinify = new javax.swing.JCheckBox();
        buildInternalCSSMinify = new javax.swing.JCheckBox();
        autoMinifyHTML = new javax.swing.JCheckBox();
        headerPaneHTML = new javax.swing.JLayeredPane();
        headerLabelHTML = new javax.swing.JLabel();
        headerScrollPaneHTML = new javax.swing.JScrollPane();
        headerEditorPaneHTML = new javax.swing.JEditorPane();
        jLayeredPaneXML = new javax.swing.JLayeredPane();
        jLayeredPaneXMLInner = new javax.swing.JLayeredPane();
        headerXML = new javax.swing.JLabel();
        newXMLFile = new javax.swing.JCheckBox();
        preExtensionXML_Label = new javax.swing.JLabel();
        separatorXML_Label = new javax.swing.JLabel();
        preExtensionXML = new javax.swing.JTextField();
        separatorXML = new javax.swing.JTextField();
        autoMinifyXML = new javax.swing.JCheckBox();
        headerPaneXML = new javax.swing.JLayeredPane();
        headerLabelXML = new javax.swing.JLabel();
        headerScrollPaneXML = new javax.swing.JScrollPane();
        headerEditorPaneXML = new javax.swing.JEditorPane();
        jLayeredPaneJSON = new javax.swing.JLayeredPane();
        jLayeredPaneJSONInner = new javax.swing.JLayeredPane();
        headerJSON = new javax.swing.JLabel();
        newJSONFile = new javax.swing.JCheckBox();
        preExtensionJSON_Label = new javax.swing.JLabel();
        separatorJSON_Label = new javax.swing.JLabel();
        preExtensionJSON = new javax.swing.JTextField();
        separatorJSON = new javax.swing.JTextField();
        autoMinifyJSON = new javax.swing.JCheckBox();
        headerPaneJSON = new javax.swing.JLayeredPane();
        headerLabelJSON = new javax.swing.JLabel();
        headerScrollPaneJSON = new javax.swing.JScrollPane();
        headerEditorPaneJSON = new javax.swing.JEditorPane();
        jLayeredPaneProjectBuild = new javax.swing.JLayeredPane();
        jLayeredPane6 = new javax.swing.JLayeredPane();
        jLabel5 = new javax.swing.JLabel();
        separatBuild = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        buildJSMinify = new javax.swing.JCheckBox();
        buildCSSMinify = new javax.swing.JCheckBox();
        skipPreExtensionJS = new javax.swing.JCheckBox();
        skipPreExtensionCSS = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        buildHTMLMinify = new javax.swing.JCheckBox();
        skipPreExtensionHTML = new javax.swing.JCheckBox();
        buildHTMLMinify1 = new javax.swing.JCheckBox();
        buildXMLMinify = new javax.swing.JCheckBox();
        skipPreExtensionXML = new javax.swing.JCheckBox();
        buildJSONMinify = new javax.swing.JCheckBox();
        skipPreExtensionJSON = new javax.swing.JCheckBox();
        jLayeredPane8 = new javax.swing.JLayeredPane();
        addLogToFile = new javax.swing.JCheckBox();
        enableOutputLogAlert = new javax.swing.JCheckBox();
        jLayeredPane10 = new javax.swing.JLayeredPane();
        enableShortKeyAction = new javax.swing.JCheckBox();
        enableShortKeyActionConfirmBox = new javax.swing.JCheckBox();

        setAlignmentX(0.0F);
        setAlignmentY(0.0F);

        headerJS.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        headerJS.setForeground(new java.awt.Color(51, 51, 51));
        org.openide.awt.Mnemonics.setLocalizedText(headerJS, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerJS.text")); // NOI18N
        jLayeredPaneJSInner.add(headerJS);
        headerJS.setBounds(0, 0, 210, 22);

        newJSFile.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(newJSFile, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.newJSFile.text")); // NOI18N
        newJSFile.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.newJSFile.toolTipText")); // NOI18N
        newJSFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newJSFileActionPerformed(evt);
            }
        });
        jLayeredPaneJSInner.add(newJSFile);
        newJSFile.setBounds(40, 40, 150, 23);

        jsObfuscate.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jsObfuscate, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.jsObfuscate.text")); // NOI18N
        jLayeredPaneJSInner.add(jsObfuscate);
        jsObfuscate.setBounds(40, 70, 120, 23);

        org.openide.awt.Mnemonics.setLocalizedText(preExtensionJS_Label, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.preExtensionJS_Label.text")); // NOI18N
        jLayeredPaneJSInner.add(preExtensionJS_Label);
        preExtensionJS_Label.setBounds(210, 40, 150, 20);

        org.openide.awt.Mnemonics.setLocalizedText(separatorJS_Label, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorJS_Label.text")); // NOI18N
        jLayeredPaneJSInner.add(separatorJS_Label);
        separatorJS_Label.setBounds(210, 70, 160, 20);

        preExtensionJS.setText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.preExtensionJS.text")); // NOI18N
        preExtensionJS.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                preExtensionJSActionPerformed(evt);
            }
        });
        jLayeredPaneJSInner.add(preExtensionJS);
        preExtensionJS.setBounds(370, 40, 50, 26);

        separatorJS.setText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorJS.text")); // NOI18N
        separatorJS.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorJS.toolTipText")); // NOI18N
        separatorJS.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                separatorJSActionPerformed(evt);
            }
        });
        jLayeredPaneJSInner.add(separatorJS);
        separatorJS.setBounds(370, 70, 50, 20);

        autoMinifyJS.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(autoMinifyJS, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.autoMinifyJS.text")); // NOI18N
        jLayeredPaneJSInner.add(autoMinifyJS);
        autoMinifyJS.setBounds(40, 130, 140, 23);

        org.openide.awt.Mnemonics.setLocalizedText(headerLabelJS, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerLabelJS.text")); // NOI18N

        headerEditorPaneJS.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerEditorPaneJS.toolTipText")); // NOI18N
        headerScrollPaneJS.setViewportView(headerEditorPaneJS);

        headerPaneJS.setLayer(headerLabelJS, javax.swing.JLayeredPane.DEFAULT_LAYER);
        headerPaneJS.setLayer(headerScrollPaneJS, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout headerPaneJSLayout = new javax.swing.GroupLayout(headerPaneJS);
        headerPaneJS.setLayout(headerPaneJSLayout);
        headerPaneJSLayout.setHorizontalGroup(
            headerPaneJSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPaneJSLayout.createSequentialGroup()
                .addComponent(headerLabelJS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(headerScrollPaneJS, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        headerPaneJSLayout.setVerticalGroup(
            headerPaneJSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPaneJSLayout.createSequentialGroup()
                .addComponent(headerLabelJS)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(headerScrollPaneJS, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );

        jLayeredPaneJSInner.add(headerPaneJS);
        headerPaneJS.setBounds(50, 170, 340, 170);

        jLayeredPaneJS.add(jLayeredPaneJSInner);
        jLayeredPaneJSInner.setBounds(20, 20, 430, 380);

        javascriptMinifyTab.addTab(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.jLayeredPaneJS.TabConstraints.tabTitle"), jLayeredPaneJS); // NOI18N

        headerCSS.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        headerCSS.setForeground(new java.awt.Color(51, 51, 51));
        org.openide.awt.Mnemonics.setLocalizedText(headerCSS, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerCSS.text")); // NOI18N
        jLayeredPaneCSSInner.add(headerCSS);
        headerCSS.setBounds(10, 20, 170, 25);

        newCSSFile.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(newCSSFile, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.newCSSFile.text")); // NOI18N
        newCSSFile.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.newCSSFile.toolTipText")); // NOI18N
        newCSSFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newCSSFileActionPerformed(evt);
            }
        });
        jLayeredPaneCSSInner.add(newCSSFile);
        newCSSFile.setBounds(50, 60, 156, 23);

        org.openide.awt.Mnemonics.setLocalizedText(preExtensionCSS_Label, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.preExtensionCSS_Label.text")); // NOI18N
        jLayeredPaneCSSInner.add(preExtensionCSS_Label);
        preExtensionCSS_Label.setBounds(230, 60, 160, 20);

        org.openide.awt.Mnemonics.setLocalizedText(separatorCSS_Label, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorCSS_Label.text")); // NOI18N
        jLayeredPaneCSSInner.add(separatorCSS_Label);
        separatorCSS_Label.setBounds(230, 90, 160, 20);

        preExtensionCSS.setText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.preExtensionCSS.text")); // NOI18N
        preExtensionCSS.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                preExtensionCSSActionPerformed(evt);
            }
        });
        jLayeredPaneCSSInner.add(preExtensionCSS);
        preExtensionCSS.setBounds(390, 60, 50, 26);

        separatorCSS.setText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorCSS.text")); // NOI18N
        separatorCSS.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorCSS.toolTipText")); // NOI18N
        separatorCSS.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                separatorCSSActionPerformed(evt);
            }
        });
        jLayeredPaneCSSInner.add(separatorCSS);
        separatorCSS.setBounds(390, 90, 50, 26);

        autoMinifyCSS.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(autoMinifyCSS, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.autoMinifyCSS.text")); // NOI18N
        jLayeredPaneCSSInner.add(autoMinifyCSS);
        autoMinifyCSS.setBounds(50, 130, 140, 23);

        org.openide.awt.Mnemonics.setLocalizedText(headerLabelCSS, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerLabelCSS.text")); // NOI18N

        headerEditorPaneCSS.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerEditorPaneCSS.toolTipText")); // NOI18N
        headerScrollPaneCSS.setViewportView(headerEditorPaneCSS);

        headerPaneCSS.setLayer(headerLabelCSS, javax.swing.JLayeredPane.DEFAULT_LAYER);
        headerPaneCSS.setLayer(headerScrollPaneCSS, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout headerPaneCSSLayout = new javax.swing.GroupLayout(headerPaneCSS);
        headerPaneCSS.setLayout(headerPaneCSSLayout);
        headerPaneCSSLayout.setHorizontalGroup(
            headerPaneCSSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPaneCSSLayout.createSequentialGroup()
                .addComponent(headerLabelCSS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(headerScrollPaneCSS, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        headerPaneCSSLayout.setVerticalGroup(
            headerPaneCSSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPaneCSSLayout.createSequentialGroup()
                .addComponent(headerLabelCSS)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(headerScrollPaneCSS, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );

        jLayeredPaneCSSInner.add(headerPaneCSS);
        headerPaneCSS.setBounds(60, 180, 340, 170);

        jLayeredPaneCSS.add(jLayeredPaneCSSInner);
        jLayeredPaneCSSInner.setBounds(10, 0, 450, 400);

        javascriptMinifyTab.addTab(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.jLayeredPaneCSS.TabConstraints.tabTitle"), jLayeredPaneCSS); // NOI18N

        headerHTML.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        headerHTML.setForeground(new java.awt.Color(51, 51, 51));
        org.openide.awt.Mnemonics.setLocalizedText(headerHTML, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerHTML.text")); // NOI18N
        jLayeredPaneHTMLInner.add(headerHTML);
        headerHTML.setBounds(0, 0, 210, 22);

        newHTMLFile.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(newHTMLFile, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.newHTMLFile.text")); // NOI18N
        newHTMLFile.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.newHTMLFile.toolTipText")); // NOI18N
        newHTMLFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newHTMLFileActionPerformed(evt);
            }
        });
        jLayeredPaneHTMLInner.add(newHTMLFile);
        newHTMLFile.setBounds(40, 40, 180, 23);

        org.openide.awt.Mnemonics.setLocalizedText(preExtensionHTML_Label, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.preExtensionHTML_Label.text")); // NOI18N
        jLayeredPaneHTMLInner.add(preExtensionHTML_Label);
        preExtensionHTML_Label.setBounds(240, 40, 170, 20);

        org.openide.awt.Mnemonics.setLocalizedText(separatorHTML_Label, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorHTML_Label.text")); // NOI18N
        jLayeredPaneHTMLInner.add(separatorHTML_Label);
        separatorHTML_Label.setBounds(240, 70, 160, 20);

        preExtensionHTML.setText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.preExtensionHTML.text")); // NOI18N
        preExtensionHTML.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                preExtensionHTMLActionPerformed(evt);
            }
        });
        jLayeredPaneHTMLInner.add(preExtensionHTML);
        preExtensionHTML.setBounds(410, 40, 50, 26);

        separatorHTML.setText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorHTML.text")); // NOI18N
        separatorHTML.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorHTML.toolTipText")); // NOI18N
        separatorHTML.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                separatorHTMLActionPerformed(evt);
            }
        });
        jLayeredPaneHTMLInner.add(separatorHTML);
        separatorHTML.setBounds(410, 70, 50, 20);

        buildInternalJSMinify.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(buildInternalJSMinify, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.buildInternalJSMinify.text")); // NOI18N
        buildInternalJSMinify.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buildInternalJSMinifyActionPerformed(evt);
            }
        });
        jLayeredPaneHTMLInner.add(buildInternalJSMinify);
        buildInternalJSMinify.setBounds(40, 110, 150, 23);

        buildInternalCSSMinify.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(buildInternalCSSMinify, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.buildInternalCSSMinify.text")); // NOI18N
        jLayeredPaneHTMLInner.add(buildInternalCSSMinify);
        buildInternalCSSMinify.setBounds(190, 110, 170, 23);

        autoMinifyHTML.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(autoMinifyHTML, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.autoMinifyHTML.text")); // NOI18N
        jLayeredPaneHTMLInner.add(autoMinifyHTML);
        autoMinifyHTML.setBounds(40, 150, 150, 23);

        org.openide.awt.Mnemonics.setLocalizedText(headerLabelHTML, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerLabelHTML.text")); // NOI18N

        headerEditorPaneHTML.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerEditorPaneHTML.toolTipText")); // NOI18N
        headerScrollPaneHTML.setViewportView(headerEditorPaneHTML);

        headerPaneHTML.setLayer(headerLabelHTML, javax.swing.JLayeredPane.DEFAULT_LAYER);
        headerPaneHTML.setLayer(headerScrollPaneHTML, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout headerPaneHTMLLayout = new javax.swing.GroupLayout(headerPaneHTML);
        headerPaneHTML.setLayout(headerPaneHTMLLayout);
        headerPaneHTMLLayout.setHorizontalGroup(
            headerPaneHTMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPaneHTMLLayout.createSequentialGroup()
                .addComponent(headerLabelHTML)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(headerScrollPaneHTML, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        headerPaneHTMLLayout.setVerticalGroup(
            headerPaneHTMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPaneHTMLLayout.createSequentialGroup()
                .addComponent(headerLabelHTML)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(headerScrollPaneHTML, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );

        jLayeredPaneHTMLInner.add(headerPaneHTML);
        headerPaneHTML.setBounds(40, 200, 340, 170);

        jLayeredPaneHTML.add(jLayeredPaneHTMLInner);
        jLayeredPaneHTMLInner.setBounds(20, 20, 480, 390);

        javascriptMinifyTab.addTab(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.jLayeredPaneHTML.TabConstraints.tabTitle"), jLayeredPaneHTML); // NOI18N

        headerXML.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        headerXML.setForeground(new java.awt.Color(51, 51, 51));
        org.openide.awt.Mnemonics.setLocalizedText(headerXML, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerXML.text")); // NOI18N
        jLayeredPaneXMLInner.add(headerXML);
        headerXML.setBounds(10, 20, 170, 25);

        newXMLFile.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(newXMLFile, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.newXMLFile.text")); // NOI18N
        newXMLFile.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.newXMLFile.toolTipText")); // NOI18N
        newXMLFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newXMLFileActionPerformed(evt);
            }
        });
        jLayeredPaneXMLInner.add(newXMLFile);
        newXMLFile.setBounds(50, 60, 159, 23);

        org.openide.awt.Mnemonics.setLocalizedText(preExtensionXML_Label, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.preExtensionXML_Label.text")); // NOI18N
        jLayeredPaneXMLInner.add(preExtensionXML_Label);
        preExtensionXML_Label.setBounds(230, 60, 160, 20);

        org.openide.awt.Mnemonics.setLocalizedText(separatorXML_Label, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorXML_Label.text")); // NOI18N
        jLayeredPaneXMLInner.add(separatorXML_Label);
        separatorXML_Label.setBounds(230, 90, 150, 20);

        preExtensionXML.setText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.preExtensionXML.text")); // NOI18N
        preExtensionXML.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                preExtensionXMLActionPerformed(evt);
            }
        });
        jLayeredPaneXMLInner.add(preExtensionXML);
        preExtensionXML.setBounds(390, 60, 50, 26);

        separatorXML.setText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorXML.text")); // NOI18N
        separatorXML.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorXML.toolTipText")); // NOI18N
        separatorXML.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                separatorXMLActionPerformed(evt);
            }
        });
        jLayeredPaneXMLInner.add(separatorXML);
        separatorXML.setBounds(390, 90, 50, 26);

        autoMinifyXML.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(autoMinifyXML, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.autoMinifyXML.text")); // NOI18N
        jLayeredPaneXMLInner.add(autoMinifyXML);
        autoMinifyXML.setBounds(50, 130, 170, 23);

        org.openide.awt.Mnemonics.setLocalizedText(headerLabelXML, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerLabelXML.text")); // NOI18N

        headerEditorPaneXML.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerEditorPaneXML.toolTipText")); // NOI18N
        headerScrollPaneXML.setViewportView(headerEditorPaneXML);

        headerPaneXML.setLayer(headerLabelXML, javax.swing.JLayeredPane.DEFAULT_LAYER);
        headerPaneXML.setLayer(headerScrollPaneXML, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout headerPaneXMLLayout = new javax.swing.GroupLayout(headerPaneXML);
        headerPaneXML.setLayout(headerPaneXMLLayout);
        headerPaneXMLLayout.setHorizontalGroup(
            headerPaneXMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPaneXMLLayout.createSequentialGroup()
                .addComponent(headerLabelXML)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(headerScrollPaneXML, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        headerPaneXMLLayout.setVerticalGroup(
            headerPaneXMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPaneXMLLayout.createSequentialGroup()
                .addComponent(headerLabelXML)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(headerScrollPaneXML, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );

        jLayeredPaneXMLInner.add(headerPaneXML);
        headerPaneXML.setBounds(50, 180, 340, 170);

        jLayeredPaneXML.setLayer(jLayeredPaneXMLInner, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPaneXMLLayout = new javax.swing.GroupLayout(jLayeredPaneXML);
        jLayeredPaneXML.setLayout(jLayeredPaneXMLLayout);
        jLayeredPaneXMLLayout.setHorizontalGroup(
            jLayeredPaneXMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneXMLLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPaneXMLInner, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(234, Short.MAX_VALUE))
        );
        jLayeredPaneXMLLayout.setVerticalGroup(
            jLayeredPaneXMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneXMLLayout.createSequentialGroup()
                .addComponent(jLayeredPaneXMLInner, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 30, Short.MAX_VALUE))
        );

        javascriptMinifyTab.addTab(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.jLayeredPaneXML.TabConstraints.tabTitle"), jLayeredPaneXML); // NOI18N

        headerJSON.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        headerJSON.setForeground(new java.awt.Color(51, 51, 51));
        org.openide.awt.Mnemonics.setLocalizedText(headerJSON, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerJSON.text")); // NOI18N
        jLayeredPaneJSONInner.add(headerJSON);
        headerJSON.setBounds(10, 20, 170, 25);

        newJSONFile.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(newJSONFile, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.newJSONFile.text")); // NOI18N
        newJSONFile.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.newJSONFile.toolTipText")); // NOI18N
        newJSONFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newJSONFileActionPerformed(evt);
            }
        });
        jLayeredPaneJSONInner.add(newJSONFile);
        newJSONFile.setBounds(50, 60, 180, 23);

        org.openide.awt.Mnemonics.setLocalizedText(preExtensionJSON_Label, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.preExtensionJSON_Label.text")); // NOI18N
        jLayeredPaneJSONInner.add(preExtensionJSON_Label);
        preExtensionJSON_Label.setBounds(230, 60, 180, 30);

        org.openide.awt.Mnemonics.setLocalizedText(separatorJSON_Label, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorJSON_Label.text")); // NOI18N
        jLayeredPaneJSONInner.add(separatorJSON_Label);
        separatorJSON_Label.setBounds(230, 90, 160, 20);

        preExtensionJSON.setText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.preExtensionJSON.text")); // NOI18N
        preExtensionJSON.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                preExtensionJSONActionPerformed(evt);
            }
        });
        jLayeredPaneJSONInner.add(preExtensionJSON);
        preExtensionJSON.setBounds(420, 60, 50, 26);

        separatorJSON.setText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorJSON.text")); // NOI18N
        separatorJSON.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatorJSON.toolTipText")); // NOI18N
        separatorJSON.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                separatorJSONActionPerformed(evt);
            }
        });
        jLayeredPaneJSONInner.add(separatorJSON);
        separatorJSON.setBounds(420, 90, 50, 26);

        autoMinifyJSON.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(autoMinifyJSON, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.autoMinifyJSON.text")); // NOI18N
        jLayeredPaneJSONInner.add(autoMinifyJSON);
        autoMinifyJSON.setBounds(50, 130, 140, 23);

        org.openide.awt.Mnemonics.setLocalizedText(headerLabelJSON, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerLabelJSON.text")); // NOI18N

        headerEditorPaneJSON.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.headerEditorPaneJSON.toolTipText")); // NOI18N
        headerScrollPaneJSON.setViewportView(headerEditorPaneJSON);

        headerPaneJSON.setLayer(headerLabelJSON, javax.swing.JLayeredPane.DEFAULT_LAYER);
        headerPaneJSON.setLayer(headerScrollPaneJSON, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout headerPaneJSONLayout = new javax.swing.GroupLayout(headerPaneJSON);
        headerPaneJSON.setLayout(headerPaneJSONLayout);
        headerPaneJSONLayout.setHorizontalGroup(
            headerPaneJSONLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPaneJSONLayout.createSequentialGroup()
                .addComponent(headerLabelJSON)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(headerScrollPaneJSON, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        headerPaneJSONLayout.setVerticalGroup(
            headerPaneJSONLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPaneJSONLayout.createSequentialGroup()
                .addComponent(headerLabelJSON)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(headerScrollPaneJSON, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );

        jLayeredPaneJSONInner.add(headerPaneJSON);
        headerPaneJSON.setBounds(50, 180, 340, 170);

        jLayeredPaneJSON.setLayer(jLayeredPaneJSONInner, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPaneJSONLayout = new javax.swing.GroupLayout(jLayeredPaneJSON);
        jLayeredPaneJSON.setLayout(jLayeredPaneJSONLayout);
        jLayeredPaneJSONLayout.setHorizontalGroup(
            jLayeredPaneJSONLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneJSONLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPaneJSONInner, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(205, Short.MAX_VALUE))
        );
        jLayeredPaneJSONLayout.setVerticalGroup(
            jLayeredPaneJSONLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneJSONLayout.createSequentialGroup()
                .addComponent(jLayeredPaneJSONInner, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 44, Short.MAX_VALUE))
        );

        javascriptMinifyTab.addTab(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.jLayeredPaneJSON.TabConstraints.tabTitle"), jLayeredPaneJSON); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.jLabel5.text")); // NOI18N
        jLayeredPane6.add(jLabel5);
        jLabel5.setBounds(10, 10, 180, 15);

        separatBuild.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(separatBuild, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatBuild.text")); // NOI18N
        separatBuild.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatBuild.toolTipText")); // NOI18N
        separatBuild.setActionCommand(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.separatBuild.actionCommand")); // NOI18N
        jLayeredPane6.add(separatBuild);
        separatBuild.setBounds(50, 40, 207, 23);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.jLabel7.text")); // NOI18N
        jLayeredPane6.add(jLabel7);
        jLabel7.setBounds(50, 80, 292, 13);

        buildJSMinify.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(buildJSMinify, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.buildJSMinify.text")); // NOI18N
        jLayeredPane6.add(buildJSMinify);
        buildJSMinify.setBounds(50, 100, 110, 23);

        buildCSSMinify.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(buildCSSMinify, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.buildCSSMinify.text")); // NOI18N
        jLayeredPane6.add(buildCSSMinify);
        buildCSSMinify.setBounds(50, 130, 140, 23);

        skipPreExtensionJS.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(skipPreExtensionJS, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.skipPreExtensionJS.text")); // NOI18N
        skipPreExtensionJS.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.skipPreExtensionJS.toolTipText")); // NOI18N
        skipPreExtensionJS.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                skipPreExtensionJSActionPerformed(evt);
            }
        });
        jLayeredPane6.add(skipPreExtensionJS);
        skipPreExtensionJS.setBounds(250, 100, 300, 23);

        skipPreExtensionCSS.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(skipPreExtensionCSS, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.skipPreExtensionCSS.text")); // NOI18N
        skipPreExtensionCSS.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.skipPreExtensionCSS.toolTipText")); // NOI18N
        jLayeredPane6.add(skipPreExtensionCSS);
        skipPreExtensionCSS.setBounds(250, 130, 300, 23);

        jLabel6.setForeground(new java.awt.Color(102, 102, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.jLabel6.text")); // NOI18N
        jLayeredPane6.add(jLabel6);
        jLabel6.setBounds(230, 10, 260, 16);

        buildHTMLMinify.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(buildHTMLMinify, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.buildHTMLMinify.text")); // NOI18N
        jLayeredPane6.add(buildHTMLMinify);
        buildHTMLMinify.setBounds(50, 160, 170, 23);

        skipPreExtensionHTML.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(skipPreExtensionHTML, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.skipPreExtensionHTML.text")); // NOI18N
        skipPreExtensionHTML.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.skipPreExtensionHTML.toolTipText")); // NOI18N
        skipPreExtensionHTML.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                skipPreExtensionHTMLActionPerformed(evt);
            }
        });
        jLayeredPane6.add(skipPreExtensionHTML);
        skipPreExtensionHTML.setBounds(250, 160, 310, 23);

        buildHTMLMinify1.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(buildHTMLMinify1, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.buildHTMLMinify1.text")); // NOI18N
        jLayeredPane6.add(buildHTMLMinify1);
        buildHTMLMinify1.setBounds(50, 160, 90, 23);

        buildXMLMinify.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(buildXMLMinify, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.buildXMLMinify.text")); // NOI18N
        jLayeredPane6.add(buildXMLMinify);
        buildXMLMinify.setBounds(50, 190, 101, 23);

        skipPreExtensionXML.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(skipPreExtensionXML, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.skipPreExtensionXML.text")); // NOI18N
        skipPreExtensionXML.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.skipPreExtensionXML.toolTipText")); // NOI18N
        jLayeredPane6.add(skipPreExtensionXML);
        skipPreExtensionXML.setBounds(250, 190, 320, 23);

        buildJSONMinify.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(buildJSONMinify, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.buildJSONMinify.text")); // NOI18N
        jLayeredPane6.add(buildJSONMinify);
        buildJSONMinify.setBounds(50, 220, 170, 23);

        skipPreExtensionJSON.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(skipPreExtensionJSON, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.skipPreExtensionJSON.text")); // NOI18N
        skipPreExtensionJSON.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.skipPreExtensionJSON.toolTipText")); // NOI18N
        jLayeredPane6.add(skipPreExtensionJSON);
        skipPreExtensionJSON.setBounds(250, 220, 310, 23);

        jLayeredPaneProjectBuild.add(jLayeredPane6);
        jLayeredPane6.setBounds(20, 10, 580, 250);

        jLayeredPane8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.jLayeredPane8.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(102, 102, 102))); // NOI18N

        addLogToFile.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(addLogToFile, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.addLogToFile.text")); // NOI18N
        addLogToFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addLogToFileActionPerformed(evt);
            }
        });
        jLayeredPane8.add(addLogToFile);
        addLogToFile.setBounds(10, 20, 280, 23);

        enableOutputLogAlert.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(enableOutputLogAlert, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.enableOutputLogAlert.text")); // NOI18N
        enableOutputLogAlert.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                enableOutputLogAlertActionPerformed(evt);
            }
        });
        jLayeredPane8.add(enableOutputLogAlert);
        enableOutputLogAlert.setBounds(10, 40, 390, 23);

        jLayeredPaneProjectBuild.add(jLayeredPane8);
        jLayeredPane8.setBounds(70, 270, 410, 70);

        jLayeredPane10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.jLayeredPane10.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(102, 102, 102))); // NOI18N

        enableShortKeyAction.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(enableShortKeyAction, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.enableShortKeyAction.text")); // NOI18N
        enableShortKeyAction.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                enableShortKeyActionActionPerformed(evt);
            }
        });
        jLayeredPane10.add(enableShortKeyAction);
        enableShortKeyAction.setBounds(10, 20, 280, 20);

        enableShortKeyActionConfirmBox.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(enableShortKeyActionConfirmBox, org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.enableShortKeyActionConfirmBox.text")); // NOI18N
        enableShortKeyActionConfirmBox.setToolTipText(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.enableShortKeyActionConfirmBox.toolTipText")); // NOI18N
        enableShortKeyActionConfirmBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                enableShortKeyActionConfirmBoxActionPerformed(evt);
            }
        });
        jLayeredPane10.add(enableShortKeyActionConfirmBox);
        enableShortKeyActionConfirmBox.setBounds(10, 40, 382, 20);

        jLayeredPaneProjectBuild.add(jLayeredPane10);
        jLayeredPane10.setBounds(70, 350, 410, 70);

        javascriptMinifyTab.addTab(org.openide.util.NbBundle.getMessage(JSCSSMinifyCompressPanel.class, "JSCSSMinifyCompressPanel.jLayeredPaneProjectBuild.TabConstraints.tabTitle"), jLayeredPaneProjectBuild); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(javascriptMinifyTab, javax.swing.GroupLayout.PREFERRED_SIZE, 711, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(javascriptMinifyTab)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void enableShortKeyActionConfirmBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableShortKeyActionConfirmBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enableShortKeyActionConfirmBoxActionPerformed

    private void enableShortKeyActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableShortKeyActionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enableShortKeyActionActionPerformed

    private void enableOutputLogAlertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableOutputLogAlertActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enableOutputLogAlertActionPerformed

    private void addLogToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLogToFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addLogToFileActionPerformed

    private void skipPreExtensionHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipPreExtensionHTMLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_skipPreExtensionHTMLActionPerformed

    private void skipPreExtensionJSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipPreExtensionJSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_skipPreExtensionJSActionPerformed

    private void buildInternalJSMinifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildInternalJSMinifyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buildInternalJSMinifyActionPerformed

    private void separatorHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_separatorHTMLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_separatorHTMLActionPerformed

    private void preExtensionHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preExtensionHTMLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_preExtensionHTMLActionPerformed

    private void newHTMLFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newHTMLFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newHTMLFileActionPerformed

    private void separatorCSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_separatorCSSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_separatorCSSActionPerformed

    private void preExtensionCSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preExtensionCSSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_preExtensionCSSActionPerformed

    private void newCSSFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCSSFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newCSSFileActionPerformed

    private void separatorJSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_separatorJSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_separatorJSActionPerformed

    private void preExtensionJSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preExtensionJSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_preExtensionJSActionPerformed

    private void newJSFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newJSFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newJSFileActionPerformed

    private void newXMLFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newXMLFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newXMLFileActionPerformed

    private void preExtensionXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preExtensionXMLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_preExtensionXMLActionPerformed

    private void separatorXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_separatorXMLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_separatorXMLActionPerformed

    private void newJSONFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newJSONFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newJSONFileActionPerformed

    private void preExtensionJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preExtensionJSONActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_preExtensionJSONActionPerformed

    private void separatorJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_separatorJSONActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_separatorJSONActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JCheckBox addLogToFile;
    public javax.swing.JCheckBox autoMinifyCSS;
    public javax.swing.JCheckBox autoMinifyHTML;
    public javax.swing.JCheckBox autoMinifyJS;
    public javax.swing.JCheckBox autoMinifyJSON;
    public javax.swing.JCheckBox autoMinifyXML;
    public javax.swing.JCheckBox buildCSSMinify;
    public javax.swing.JCheckBox buildHTMLMinify;
    public javax.swing.JCheckBox buildHTMLMinify1;
    public javax.swing.JCheckBox buildInternalCSSMinify;
    public javax.swing.JCheckBox buildInternalJSMinify;
    public javax.swing.JCheckBox buildJSMinify;
    public javax.swing.JCheckBox buildJSONMinify;
    public javax.swing.JCheckBox buildXMLMinify;
    public javax.swing.JCheckBox enableOutputLogAlert;
    public javax.swing.JCheckBox enableShortKeyAction;
    public javax.swing.JCheckBox enableShortKeyActionConfirmBox;
    private javax.swing.JLabel headerCSS;
    protected javax.swing.JEditorPane headerEditorPaneCSS;
    protected javax.swing.JEditorPane headerEditorPaneHTML;
    protected javax.swing.JEditorPane headerEditorPaneJS;
    protected javax.swing.JEditorPane headerEditorPaneJSON;
    protected javax.swing.JEditorPane headerEditorPaneXML;
    private javax.swing.JLabel headerHTML;
    private javax.swing.JLabel headerJS;
    private javax.swing.JLabel headerJSON;
    private javax.swing.JLabel headerLabelCSS;
    private javax.swing.JLabel headerLabelHTML;
    private javax.swing.JLabel headerLabelJS;
    private javax.swing.JLabel headerLabelJSON;
    private javax.swing.JLabel headerLabelXML;
    private javax.swing.JLayeredPane headerPaneCSS;
    private javax.swing.JLayeredPane headerPaneHTML;
    private javax.swing.JLayeredPane headerPaneJS;
    private javax.swing.JLayeredPane headerPaneJSON;
    private javax.swing.JLayeredPane headerPaneXML;
    private javax.swing.JScrollPane headerScrollPaneCSS;
    private javax.swing.JScrollPane headerScrollPaneHTML;
    private javax.swing.JScrollPane headerScrollPaneJS;
    private javax.swing.JScrollPane headerScrollPaneJSON;
    private javax.swing.JScrollPane headerScrollPaneXML;
    private javax.swing.JLabel headerXML;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLayeredPane jLayeredPane10;
    private javax.swing.JLayeredPane jLayeredPane6;
    private javax.swing.JLayeredPane jLayeredPane8;
    private javax.swing.JLayeredPane jLayeredPaneCSS;
    private javax.swing.JLayeredPane jLayeredPaneCSSInner;
    private javax.swing.JLayeredPane jLayeredPaneHTML;
    private javax.swing.JLayeredPane jLayeredPaneHTMLInner;
    private javax.swing.JLayeredPane jLayeredPaneJS;
    private javax.swing.JLayeredPane jLayeredPaneJSInner;
    private javax.swing.JLayeredPane jLayeredPaneJSON;
    private javax.swing.JLayeredPane jLayeredPaneJSONInner;
    private javax.swing.JLayeredPane jLayeredPaneProjectBuild;
    private javax.swing.JLayeredPane jLayeredPaneXML;
    private javax.swing.JLayeredPane jLayeredPaneXMLInner;
    private javax.swing.JTabbedPane javascriptMinifyTab;
    public javax.swing.JCheckBox jsObfuscate;
    public javax.swing.JCheckBox newCSSFile;
    public javax.swing.JCheckBox newHTMLFile;
    public javax.swing.JCheckBox newJSFile;
    public javax.swing.JCheckBox newJSONFile;
    public javax.swing.JCheckBox newXMLFile;
    public javax.swing.JTextField preExtensionCSS;
    public javax.swing.JLabel preExtensionCSS_Label;
    public javax.swing.JTextField preExtensionHTML;
    public javax.swing.JLabel preExtensionHTML_Label;
    public javax.swing.JTextField preExtensionJS;
    public javax.swing.JTextField preExtensionJSON;
    public javax.swing.JLabel preExtensionJSON_Label;
    public javax.swing.JLabel preExtensionJS_Label;
    public javax.swing.JTextField preExtensionXML;
    public javax.swing.JLabel preExtensionXML_Label;
    public javax.swing.JCheckBox separatBuild;
    public javax.swing.JTextField separatorCSS;
    public javax.swing.JLabel separatorCSS_Label;
    public javax.swing.JTextField separatorHTML;
    public javax.swing.JLabel separatorHTML_Label;
    public javax.swing.JTextField separatorJS;
    public javax.swing.JTextField separatorJSON;
    public javax.swing.JLabel separatorJSON_Label;
    public javax.swing.JLabel separatorJS_Label;
    public javax.swing.JTextField separatorXML;
    public javax.swing.JLabel separatorXML_Label;
    public javax.swing.JCheckBox skipPreExtensionCSS;
    public javax.swing.JCheckBox skipPreExtensionHTML;
    public javax.swing.JCheckBox skipPreExtensionJS;
    public javax.swing.JCheckBox skipPreExtensionJSON;
    public javax.swing.JCheckBox skipPreExtensionXML;
    // End of variables declaration//GEN-END:variables
}
